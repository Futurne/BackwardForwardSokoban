"""Gym environments for the sokoban.
"""
import numpy as np

from gym_sokoban.envs import sokoban_env

from utils import print_board, build_board_from_raw
from variables import TYPE_LOOKUP
from macro_move import macro_moves


class MacroSokobanEnv(sokoban_env.SokobanEnv):
    """Casual Sokoban with macro-moves.

    The environment is the same, but now a step
    in the environment is a macro-move.
    A macro-move is a serie of moves where
    only one box is pushed.
    """
    def __init__(
        self,
        dim_room: tuple[int]=(10, 10),
        max_steps: int=120,
        num_boxes: int=4,
        num_gen_steps: int=None,
        ):
        super().__init__(dim_room, max_steps, num_boxes, num_gen_steps)

    def step(self, room_state: np.array):
        """Update the environment state.

        Args
        ----
        :room_state: The new state of the environment.
            This state has to be one of the states generated
            by the `self.moves()` method, to ensure this is a state
            generated by a macro-move.
        """
        # Apply movement
        self.num_env_steps += 1
        self.room_state = room_state

        # Calculate reward
        self._calc_reward()

        # Compute returns
        done = self._check_if_done()
        observation = self.render(mode='raw')

        info = dict()
        if done:
            info["maxsteps_used"] = self._check_if_maxsteps()
            info["all_boxes_on_target"] = self._check_if_all_boxes_on_target()

        return observation, self.reward_last, done, info

    def reachable_states(self):
        """Return all the states reachable by macro-moves.
        """
        raw = self.render(mode='raw')
        board, player = build_board_from_raw(raw)
        boxes = np.argwhere(
            (board == TYPE_LOOKUP['box on target']) |\
            (board == TYPE_LOOKUP['box not on target'])
        )

        states = []
        for box in boxes:
            # Generate all macro moves for this box
            for n_board, n_player in macro_moves(board, player, box, True):
                n_board[tuple(n_player)] = TYPE_LOOKUP['player']  # Place the player
                states.append(n_board)  # Add the macro-move

        return states


if __name__ == '__main__':
    env = MacroSokobanEnv((6, 6), num_boxes=2)
    raw = env.reset(render_mode='raw')
    board, player = build_board_from_raw(raw)
    print_board(board, player)

    moves = env.moves()
    print('Number of macro moves:', len(moves))
